// CyberTanATS.cpp : Defines the class behaviors for the application.
//

#include "stdafx.h"
#include "CyberTanATS.h"
#include "CyberTanATSDlg.h"
#include "shlwapi.h"
#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// CATSApp

BEGIN_MESSAGE_MAP(CATSApp, CWinApp)
	ON_COMMAND(ID_HELP, &CWinApp::OnHelp)
END_MESSAGE_MAP()


// CATSApp construction

CATSApp::CATSApp()
{
	
	// Place all significant initialization in InitInstance
}


// The one and only CATSApp object

CATSApp theApp;


// CATSApp initialization

BOOL CATSApp::InitInstance()
{
	// InitCommonControlsEx() is required on Windows XP if an application
	// manifest specifies use of ComCtl32.dll version 6 or later to enable
	// visual styles.  Otherwise, any window creation will fail.
	INITCOMMONCONTROLSEX InitCtrls;
	InitCtrls.dwSize = sizeof(InitCtrls);
	// Set this to include all the common control classes you want to use
	// in your application.
	InitCtrls.dwICC = ICC_WIN95_CLASSES;
	InitCommonControlsEx(&InitCtrls);

	CWinApp::InitInstance();

	AfxEnableControlContainer();

	// Standard initialization
	// If you are not using these features and wish to reduce the size
	// of your final executable, you should remove from the following
	// the specific initialization routines you do not need
	// Change the registry key under which our settings are stored
	// You should modify this string to be something appropriate
	// such as the name of your company or organization
	SetRegistryKey(_T("Local AppWizard-Generated Applications"));
	GetAppVersion();
	CATSDlg dlg;
	m_pMainWnd = &dlg;
	INT_PTR nResponse = dlg.DoModal();

	if (nResponse == IDOK)
	{
		//  Place code here to handle when the dialog is
		//  dismissed with OK
	}
	else if (nResponse == IDCANCEL)
	{
		//  Place code here to handle when the dialog is
		//  dismissed with Cancel
	}

	// Since the dialog has been closed, return FALSE so that we exit the
	//  application, rather than start the application's message pump.
	return FALSE;
}

void CATSApp::GetAppVersion() 
{	
	CString sText;

	m_AppVersionString = "Unknown";

	LPTSTR pszFileName = sText.GetBuffer(MAX_PATH + 1);

	if (GetModuleFileName(NULL, pszFileName, MAX_PATH) > 0)
	{
		DWORD dwType;
		DWORD dwDataLen = GetFileVersionInfoSize(pszFileName, &dwType);

		void *pszBuffer = malloc(dwDataLen + 1);

		if (pszBuffer == NULL)
			return;

		if (GetFileVersionInfo(pszFileName, 0L, dwDataLen, pszBuffer) == TRUE)
		{
			VS_FIXEDFILEINFO *pFileInfo;

			if (VerQueryValue(pszBuffer, _T( "\\" ),
								 (void **)&pFileInfo, (UINT *)&dwDataLen) == TRUE)
			{
				char	szScratch[ 16 ];

				memcpy( &m_AppVersionInfo, pFileInfo, sizeof( VS_FIXEDFILEINFO ) );

				sprintf_s( szScratch, "%d.%2.2d.%2.2d.%2.2d",
					HIWORD( m_AppVersionInfo.dwFileVersionMS ),
					LOWORD( m_AppVersionInfo.dwFileVersionMS ),
					HIWORD( m_AppVersionInfo.dwFileVersionLS ),
					LOWORD( m_AppVersionInfo.dwFileVersionLS )
					);

				m_AppVersionString = szScratch;
			}
		}
		free(pszBuffer);
		PathRemoveFileSpec(pszFileName);
		SetCurrentDirectory(pszFileName);
	  }

	sText.ReleaseBuffer();
}