// MacDlg.cpp : implementation file
//

#include "stdafx.h"
#include "CyberTanATS.h"
#include "CyberTanATSDlg.h"
#include "MacDlg.h"
#include "Comm.h"


// CMacDlg dialog
extern ATSCONFIG AtsInfo;

IMPLEMENT_DYNAMIC(CMacDlg, CDialog)

CMacDlg::CMacDlg(CWnd* pParent /*=NULL*/)
	: CDialog(CMacDlg::IDD, pParent)
{
	m_bMacLegal = false;
}

CMacDlg::~CMacDlg()
{
	
}

void CMacDlg::Create(HWND hWnd)
{
	m_NotifyhWnd = hWnd;	
}

void CMacDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);
	DDX_Control(pDX, IDC_EDIT_MAC, m_EDIT_mac);
	DDX_Control(pDX, IDC_EDIT_SN, m_EDIT_sn);
	DDX_Control(pDX, IDC_EDIT_SSN1, m_EDIT_ssn1);
	DDX_Control(pDX, IDC_EDIT_SSN2, m_EDIT_ssn2);
}


BEGIN_MESSAGE_MAP(CMacDlg, CDialog)	
	ON_BN_CLICKED(IDCANCEL, &CMacDlg::OnBnClickedCancel)
	ON_BN_CLICKED(IDOK, &CMacDlg::OnBnClickedOk)
	ON_WM_SHOWWINDOW()
END_MESSAGE_MAP()


// CMacDlg message handlers

void CMacDlg::PreInitDialog()
{
	CDialog::PreInitDialog();
}

BOOL CMacDlg::CheckMac()
{	
	CString msg;
	m_bMacLegal = false;
	short len = m_csMac.GetLength();

	if( len != 12)
	{
		msg.Format("Mac address:\"%s\", length is %d, <> 12.\r\n", m_csMac, len);
		MessageBox(msg,"ERROR",MB_OK);
		m_EDIT_mac.SetFocus();
		m_EDIT_mac.SetSel(0, m_csMac.GetLength());
		return false;
	}

	for ( int i = 0 ; i < 12 ; i ++ )
	{		
		if ( iswxdigit(int(m_csMac[+i])) == 0 )
		{
			msg.Format("Mac address:\"%s\", '%c' format is illegal.",m_csMac,m_csMac[i]);
			MessageBox(msg,"ERROR",MB_OK);
			m_EDIT_mac.SetFocus();
			m_EDIT_mac.SetSel(0,m_csMac.GetLength());
			return false;
		}
		else
		m_bMacLegal = true;
	}
	
	if ( m_csMac.CompareNoCase(AtsInfo.m_csMacStart) < 0 )
	{		
		msg.Format("Mac overrange [%s ~ %s]",AtsInfo.m_csMacStart, AtsInfo.m_csMacEnd);
		MessageBox(msg,"ERROR",MB_OK);
		m_EDIT_mac.SetFocus();
		m_EDIT_mac.SetSel(0,m_csMac.GetLength());
		return false;
	}

	if ( m_csMac.CompareNoCase(AtsInfo.m_csMacEnd) > 0 )
	{		
		msg.Format("Mac overrange [%s ~ %s]",AtsInfo.m_csMacStart, AtsInfo.m_csMacEnd);		
		MessageBox(msg,"ERROR",MB_OK);
		m_EDIT_mac.SetFocus();
		m_EDIT_mac.SetSel(0,m_csMac.GetLength());
		return false;
	}
	
	msg.Format("Input Mac Address : %s", m_csMac);
	ShowMessage(msg);
	return true;	
}

BOOL CMacDlg::CheckSN()
{
	//  Add your control notification handler code here
	CString msg;
	m_bMacLegal = false;
	int len = m_csSN.GetLength();
	if(m_csSN.GetLength() != AtsInfo.m_nSN_Length )
	{
		msg.Format("SN:\"%s\", length is %d, <> %d.\r\n",m_csSN, m_csSN.GetLength(), AtsInfo.m_nSN_Length);
		MessageBox(msg,"ERROR",MB_OK);
		m_EDIT_sn.SetFocus();
		m_EDIT_sn.SetSel(0,m_csSN.GetLength());
		return false;
	}

	//for ( int i = 0 ; i < 12 ; i ++ )
	//{		
	//	if ( iswxdigit(int(m_csSN[+i])) == 0 )
	//	{
	//		msg.Format("SN:\"%s\", '%c' format is illegal.",m_csSN,m_csSN[i]);
	//		MessageBox(msg,"ERROR",MB_OK);
	//		m_EDIT_sn.SetFocus();
	//		m_EDIT_sn.SetSel(0,m_csSN.GetLength());
	//		return false;
	//	}
	//	else
	//	m_bMacLegal = true;
	//}

	msg.Format("Input SN : %s",m_csSN);
	ShowMessage(msg);
	return true;
}

BOOL CMacDlg::CheckSSN1()
{
	//  Add your control notification handler code here
	CString msg;

	m_bMacLegal = false;

	if(m_csSSN1.GetLength() != 12)
	{
		msg.Format("SSN1:\"%s\", length is %d, <> 12.\r\n",m_csSSN1, m_csSSN1.GetLength());
		MessageBox(msg,"ERROR",MB_OK);
		m_EDIT_ssn1.SetFocus();
		m_EDIT_ssn1.SetSel(0,m_csSSN1.GetLength());
		return false;
	}
	for ( int i = 0 ; i < 12 ; i ++ )
	{		
		if ( iswxdigit(int(m_csSSN1[+i])) == 0 )
		{
			msg.Format("SSN1:\"%s\", '%c' format is illegal.",m_csSSN1,m_csSSN1[i]);
			MessageBox(msg,"ERROR",MB_OK);
			m_EDIT_ssn1.SetFocus();
			m_EDIT_ssn1.SetSel(0,m_csSSN1.GetLength());
			return false;
		}
		else
		m_bMacLegal = true;
	}
	
	msg.Format("Input SSN1 : %s",m_csSSN1);
	ShowMessage(msg);
	return true;
}

void CMacDlg::ShowMessage(CString msg)
{
	::SendMessage(m_NotifyhWnd, MSG_SHOW_MESSAGE, (WPARAM)&msg, 0);
}

void CMacDlg::OnBnClickedCancel()
{
	m_bMacLegal = false;
	OnCancel();
}

void CMacDlg::OnBnClickedOk()
{	
	m_EDIT_mac.GetWindowText(m_csMac);
	m_EDIT_sn.GetWindowText(m_csSN);
	m_EDIT_ssn1.GetWindowText(m_csSSN1);
	m_EDIT_ssn2.GetWindowText(m_csSSN2);

	if ( AtsInfo.m_bCheckSN )
		if ( !CheckSN() )
			return;

	if ( AtsInfo.m_bCheckMac )
	{
		if(!CheckMac())
			return;
	}

	m_bMacLegal = true;

	OnOK();
}

BOOL CMacDlg::PreTranslateMessage(MSG* pMsg)
{	
	if ( pMsg->message == WM_KEYDOWN && pMsg->hwnd == m_EDIT_sn.m_hWnd )
	{
		//在SN EDIT按enter時，對MAC EDIT做focus
		if ( pMsg->wParam == VK_RETURN && AtsInfo.m_bInputMac )
		{			
			m_EDIT_mac.SetFocus();
			m_EDIT_mac.SetSel( 0, m_EDIT_mac.GetWindowTextLength() );
			return TRUE;
		}
	}

	if ( pMsg->message == WM_KEYDOWN && pMsg->hwnd == m_EDIT_mac.m_hWnd )
	{		
		//在mac按enter時，對SSN1 EDIT做focus
		if ( pMsg->wParam == VK_RETURN && AtsInfo.m_bInputSSN1 )
		{			
			m_EDIT_ssn1.SetFocus();
			m_EDIT_ssn1.SetSel( 0, m_EDIT_ssn1.GetWindowTextLength() );
			return TRUE;
		}
	}

	if ( pMsg->message == WM_KEYDOWN && pMsg->hwnd == m_EDIT_ssn1.m_hWnd )
	{		
		//在ssn1按enter時，對SSN2 EDIT做focus
		if ( pMsg->wParam == VK_RETURN && AtsInfo.m_bInputSSN2 )
		{			
			m_EDIT_ssn2.SetFocus();
			m_EDIT_ssn2.SetSel( 0, m_EDIT_ssn2.GetWindowTextLength() );
			return TRUE;
		}
	}

	return CDialog::PreTranslateMessage(pMsg);
}

void CMacDlg::OnShowWindow(BOOL bShow, UINT nStatus)
{
	CDialog::OnShowWindow(bShow, nStatus);

	m_EDIT_sn.EnableWindow(AtsInfo.m_bInputSN);
	m_EDIT_mac.EnableWindow(AtsInfo.m_bInputMac);
	m_EDIT_ssn1.EnableWindow(AtsInfo.m_bInputSSN1);
	m_EDIT_ssn2.EnableWindow(AtsInfo.m_bInputSSN2);

	if ( AtsInfo.m_bInputSN )
		m_EDIT_sn.SetFocus();
}

